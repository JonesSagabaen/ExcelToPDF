package gui.configuration.view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.ArrayList;

public class CheckboxPanel {
    private JPanel MainView;
    private JPanel body;
    private JPanel addButtonPanel;
    private JButton addConditionButton;
    private JPanel commonPanel;
    private JTextField fontSizeField;
    private JPanel borderPanel;
    private JTextField excelLookupField;

    /**
     * References to all condition rows displayed in the UI.
     */
    private ArrayList<CheckboxPanelRow> conditionRows;

    public CheckboxPanel() {
        conditionRows = new ArrayList<>();
        initializeMainBodyPanel();
        setFurtherUICustomizations();

        // Action listener for adding a condition to the view
        addConditionButton.addActionListener((ActionEvent e) -> {
            addConditionRow();
        });
    }

    /**
     * Initialize main body panel that will contain configuration rows and the overall add button
     */
    private void initializeMainBodyPanel() {
        // BoxLayout layout manager is used for adding new ConfigurationRow components to this view
        // Note: body JPanel in CheckboxPanel.form needs "Layout Manager" variable to not be GridLayoutManager (IntelliJ)
        //       in order to prevent a NullPointerException at runtime.
        body.setLayout(new BoxLayout(body, BoxLayout.PAGE_AXIS));
        addConditionRow();
    }

    /**
     * All further UI customizations are contained here where commenting out this method will still run the app
     * but without these customizations.
     */
    private void setFurtherUICustomizations() {
        // Lined border
        borderPanel.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
    }

    /**
     * Add a new condition row to the UI.
     */
    public void addConditionRow() {
        CheckboxPanelRow conditionToAdd = new CheckboxPanelRow(this);
        conditionRows.add(conditionToAdd);
        body.add(conditionToAdd.getMainView());
        body.revalidate();
        body.repaint();
    }

    /**
     * Remove a condition row from the UI.
     *
     * @param rowToDelete
     */
    public void removeConditionRow(CheckboxPanelRow rowToDelete) {
        body.remove(conditionRows.indexOf(rowToDelete));
        conditionRows.remove(rowToDelete);
        body.revalidate();
        body.repaint();
    }

    /**
     * Front-end container for entire panel.
     *
     * @return The main panel of this entire form.
     */
    public JPanel getMainView() {
        return MainView;
    }

    /**
     * Construct the string representation of this configuration type.
     *
     * @return String array of this CheckboxPanel configuration type.
     */
    public String[] stringConfig() {
        ArrayList<String> returnString = new ArrayList<>();
        returnString.add(fontSizeField.getText());
        returnString.add(excelLookupField.getText());
        for (CheckboxPanelRow conditionRow : conditionRows) {
            returnString.add(conditionRow.getConditionTextFieldContent());
            returnString.add(conditionRow.getXCoordinateFieldContent());
            returnString.add(conditionRow.getYCoordinateFieldContent());
        }
        return returnString.toArray(new String[conditionRows.size()]);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        MainView = new JPanel();
        MainView.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        borderPanel = new JPanel();
        borderPanel.setLayout(new GridLayoutManager(3, 1, new Insets(5, 0, 5, 5), -1, -1));
        MainView.add(borderPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 1, false));
        commonPanel = new JPanel();
        commonPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        borderPanel.add(commonPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        commonPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Excel Lookup");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 2, false));
        excelLookupField = new JTextField();
        panel1.add(excelLookupField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        commonPanel.add(panel2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("PDF Font Size");
        panel2.add(label2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 2, false));
        fontSizeField = new JTextField();
        panel2.add(fontSizeField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        body = new JPanel();
        body.setLayout(new BorderLayout(0, 0));
        borderPanel.add(body, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        addButtonPanel = new JPanel();
        addButtonPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        borderPanel.add(addButtonPanel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        addConditionButton = new JButton();
        addConditionButton.setText("Add Condition");
        addButtonPanel.add(addConditionButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return MainView;
    }
}
